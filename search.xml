<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/10/27/test/"/>
      <url>/2023/10/27/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2023/10/27/Java%E9%9D%A2%E8%AF%95/"/>
      <url>/2023/10/27/Java%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面试"><a href="#Java面试" class="headerlink" title="Java面试"></a><code>Java面试</code></h1><h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a><code>一、基础</code></h2><h3 id="1-面向对象编程有哪些特征"><a href="#1-面向对象编程有哪些特征" class="headerlink" title="1. 面向对象编程有哪些特征?"></a><code>1. 面向对象编程有哪些特征?</code></h3><p><strong>抽象：</strong>抽象是对同一个目标的共有的属性（特征）和方法（功能&#x2F;行为）进行抽取、归纳、总结。所以抽象不是了解和解决全部问题，而是选择公共部分，忽略一个主题中与当前目标无关的那些方面。</p><p><strong>封装：</strong>封装就是隐藏对象的属性和实施细节，控制成员属性的访问和修改权限，通过特定公开的方法暴露给外面访问。比如以下代码：</p><pre><code class="java">private String name = &quot;Yangyong test&quot;;public String getName()&#123;    return name;&#125;</code></pre><p>name属性被封装起来，只能通过对象的<code>getName()</code>方法才能访问。</p><p><strong>继承：</strong>继承就是指子类继承父类的成员和方法，使得子类也能具有父类相同的行为。 </p><blockquote><p>&#x3D;&#x3D;Java类之间只能实现单继承，接口之间可以实现多继承&#x3D;&#x3D;</p></blockquote><p><strong>多态：</strong>多态是指同一个行为具有多个不同的表现形式或形态，如一个类的方法在不同的情况有不同的表现形式。</p><blockquote><p>&#x3D;&#x3D;比如方法重写：子类可以重写父类的方法，通过父类引用变量调用该方法时，根据实际对象的类型，会调用子类中的方法。&#x3D;&#x3D;</p></blockquote><pre><code class="java">class Father&#123;    public void father()&#123;        System.out.println(&quot;father&quot;);    &#125;&#125;class Son1 extends Father&#123;    @Override    public void father()&#123;        System.out.println(&quot;son1&quot;);    &#125;&#125;class Son2 extends Father&#123;    @Override    public void father()&#123;        System.out.println(&quot;son2&quot;);    &#125;&#125;public class Main&#123;    public static void main(String args[])&#123;        Father f1 = new Son1();        Father f2 = new Son2();        f1.father;        f2.father;    &#125;&#125;</code></pre><h3 id="2-JDK-和JRE的区别是什么？"><a href="#2-JDK-和JRE的区别是什么？" class="headerlink" title="2. JDK 和JRE的区别是什么？"></a><code>2. JDK 和JRE的区别是什么？</code></h3><p><strong>JDK：</strong>JDK全称：Java Development Kit，是整个Java的核心，包含Java运行环境（JRE）和一系列Java开发工具完整的包。</p><p><strong>JRE：</strong>JRE全称Java Runtime Environment，是Java程序的运行环境，包含JVM、Java核心库等。JRE只能用于运行Java程序，不能用于编译Java程序。JRE是JDK的子集。</p><p><img src="H:\JavaCode\Java学习书籍\images\JDK.jpg"></p><h3 id="3-如何编译和运行Java文件"><a href="#3-如何编译和运行Java文件" class="headerlink" title="3. 如何编译和运行Java文件"></a><code>3. 如何编译和运行Java文件</code></h3><p>使用<code>javac</code>命令来编译.java文件</p><blockquote><p><code>javac</code> Test.java</p></blockquote><p>使用<code>java</code>命令来运行</p><blockquote><p><code>java</code>Test</p></blockquote><h3 id="4-Java中的关键字有哪些？"><a href="#4-Java中的关键字有哪些？" class="headerlink" title="4. Java中的关键字有哪些？"></a><code>4. Java中的关键字有哪些？</code></h3><table><thead><tr><th>关键字</th><th>含义</th><th>关键字</th><th>含义</th><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>package</td><td>指定包名</td><td>import</td><td>引用类</td><td>class</td><td>定义类</td></tr><tr><td>interface</td><td>接口定义</td><td>abstract</td><td>抽象类或抽象方法</td><td>new</td><td>创建对象</td></tr><tr><td>this</td><td>实例本身</td><td>super</td><td>引用父类</td><td>void</td><td>无返回</td></tr><tr><td>byte</td><td>字节型</td><td>int</td><td>整型</td><td>short</td><td>短整型</td></tr><tr><td>long</td><td>长整型</td><td>float</td><td>单精度浮点数</td><td>double</td><td>双精度浮点数</td></tr><tr><td>boolean</td><td>布尔型</td><td>enum</td><td>枚举型</td><td>extends</td><td>继承类</td></tr><tr><td>implements</td><td>实现接口</td><td>private</td><td>私有权限，本类可用</td><td>protected</td><td>保护权限，本包、本类和子类可用</td></tr><tr><td>public</td><td>公开权限，可跨包使用</td><td>final</td><td>类不可继承、方法不可重写、常量</td><td>static</td><td>静态属性</td></tr><tr><td>synchronized</td><td>线程同步</td><td>if</td><td>如果</td><td>else</td><td>或者</td></tr><tr><td>for</td><td>for循环</td><td>do</td><td>do while循环</td><td>switch case default</td><td>分支</td></tr><tr><td>break</td><td>结束循环</td><td>continue</td><td>继续循环</td><td>return</td><td>返回</td></tr><tr><td>try</td><td>异常代码捕获</td><td>catch</td><td>异常处理</td><td>finally</td><td>最后异常处理</td></tr><tr><td>throw</td><td>手动抛出一个异常</td><td>throws</td><td>声明要抛出的异常</td><td>instanceof</td><td>判断是否XX类的实例</td></tr><tr><td>volatile</td><td>线程可见</td><td>transient</td><td>不用序列化</td><td>assert</td><td>断言</td></tr></tbody></table><p>保留关键字：goto 跳转   const 常量</p><p>特殊关键字：true false null</p><h3 id="5-Java-中常量类型有几种类型？"><a href="#5-Java-中常量类型有几种类型？" class="headerlink" title="5. Java 中常量类型有几种类型？"></a><code>5. Java 中常量类型有几种类型？</code></h3><p>Java常量有三种类型：静态常量（类中）、成员常量（类中）、局部常量（类方法中）</p><h3 id="6-Java中有哪几种基本数据类型？"><a href="#6-Java中有哪几种基本数据类型？" class="headerlink" title="6. Java中有哪几种基本数据类型？"></a><code>6. Java中有哪几种基本数据类型？</code></h3><p><strong>整型：</strong>byte（1）、short（2）、int（4）、long（8）</p><p><strong>浮点型：</strong>float（4）、double（8）</p><p><strong>字符型：</strong>char（2）</p><p><strong>布尔型：</strong><code>boolean</code></p><h3 id="7-和equals的区别"><a href="#7-和equals的区别" class="headerlink" title="7. ==和equals的区别"></a><code>7. ==和equals的区别</code></h3><p><strong>&#x3D;&#x3D;：</strong> 1）如果比较的对象是基本数据类型，则比较的是数值是否相同；</p><p>​         2）如果比较的是引用数据类型，则比较的是对象地址是否相同。</p><p><strong><code>equals</code>：</strong><code>Object</code>类提供的方法，就收<code>Object</code>参数类型，源码如下：</p><pre><code class="java">public boolean equals(Object obj)&#123;    return (this == obj);&#125;</code></pre><p>用于比较两个对象是否相等，默认是比较两个对象的地址，不能用于比较基本数据类型，但可以是包装类型。</p><h3 id="8-String-比较使用-还是equals？为什么？"><a href="#8-String-比较使用-还是equals？为什么？" class="headerlink" title="8. String 比较使用== 还是equals？为什么？"></a><code>8. String 比较使用== 还是equals？为什么？</code></h3><p>String源码中已经重写了equals方法，方法中，先用&#x3D;&#x3D;比较是否是相同的对象，然后比较内容是否相同。</p><p>&#x3D;&#x3D;所以如果要比较字符串对象的内容是否相同就用equals方法，而要比较字符串的内存地址是否相等，就用<code>==</code>比较。不过实际情况都是比较字符串内容。&#x3D;&#x3D;</p><p>举例：</p><pre><code class="java">public static void main(String args[])&#123;    String s1 = new String(&quot;123&quot;);    String s2 = new String(&quot;123&quot;);    System.out.println(s1 == s2); // false    System.out.println(s1.equals(s2)); // true&#125;</code></pre><h3 id="9-public、private、protected和默认的区别"><a href="#9-public、private、protected和默认的区别" class="headerlink" title="9. public、private、protected和默认的区别"></a><code>9. public、private、protected和默认的区别</code></h3><table><thead><tr><th>作用域</th><th>当前类</th><th>当前包</th><th>子孙类</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>默认</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><h3 id="10-s-s-1-和-s-1的区别？"><a href="#10-s-s-1-和-s-1的区别？" class="headerlink" title="10. s = s + 1 和 s += 1的区别？"></a><code>10. s = s + 1 和 s += 1的区别？</code></h3><p>如果s原有数据类型小于int类型，则<code>s = s+1</code>会发生编译异常，需要进行强制转换。而&#x3D;&#x3D;<code>s += 1</code>&#x3D;&#x3D;支持隐式强制类型转换。</p><h3 id="11-float-1-8有错吗？"><a href="#11-float-1-8有错吗？" class="headerlink" title="11. float = 1.8有错吗？"></a><code>11. float = 1.8有错吗？</code></h3><p>&#x3D;&#x3D;有错&#x3D;&#x3D;，1.8默认为双精度，需要向下转型，即&#x3D;&#x3D;<code>float = 1.8F</code>&#x3D;&#x3D;或&#x3D;&#x3D;<code>float = （float）1.8</code>&#x3D;&#x3D;。</p><h3 id="12-怎么理解值传递和引用传递？"><a href="#12-怎么理解值传递和引用传递？" class="headerlink" title="12. 怎么理解值传递和引用传递？"></a><code>12. 怎么理解值传递和引用传递？</code></h3><p><strong>值传递：</strong>传递的是基本数据类型参数的字面量值的拷贝，方法对参数的修改不会影响之前参数的值。</p><p><strong>引用传递：</strong>传递的是该参量所引用的对象在堆中地址的拷贝，而不是拷贝整个对象本身，方法对参数的修改会直接影响参数之前的值。</p><h3 id="13-static关键字有什么用？"><a href="#13-static关键字有什么用？" class="headerlink" title="13. static关键字有什么用？"></a><code>13. static关键字有什么用？</code></h3><p><code>static</code>可以用来修饰&#x3D;&#x3D;静态内部类&#x3D;&#x3D;、&#x3D;&#x3D;静态方法&#x3D;&#x3D;、&#x3D;&#x3D;静态变量&#x3D;&#x3D;、&#x3D;&#x3D;静态代码块&#x3D;&#x3D;。</p><ul><li><p>静态内部类：可以不依赖外部类实例化对象而被实例化，而普通内部类需要依靠外部类实例化后才能被实例化。如下代码：</p><pre><code class="java">public class test &#123;    public class t1&#123;        public void t11()&#123;            System.out.println(&quot;普通内部类&quot;);        &#125;    &#125;    public static class st&#123;        // static内部类中的方法必须是static方法，否则内部类也必须实例化。        public static void st1()&#123;            System.out.println(&quot;static 内部类&quot;);        &#125;    &#125;    public static void main(String[] args) &#123;        // static内部类直接调用        test.st.st1();        // 普通内部类首先实例化外部类，在实例化内部类才能调用内部类中的方法。        test.t1 t1 = new test().new t1();        t1.t11();    &#125;&#125;</code></pre></li><li><p>静态方法：静态方法属于类方法，不需要实例化对象就能调用。</p></li><li><p>静态变量：静态变量属于类，不需要实例化对象就可以调用。</p></li><li><p>静态代码块：静态代码块只会在类加载的时候被加载一次，有且只有一次。</p></li></ul><h3 id="14-static变量和普通变量的区别"><a href="#14-static变量和普通变量的区别" class="headerlink" title="14. static变量和普通变量的区别"></a><code>14. static变量和普通变量的区别</code></h3><ol><li>&#x3D;&#x3D;所属目标不同&#x3D;&#x3D;：static变量属于类，普通变量属于对象。</li><li>&#x3D;&#x3D;存储区域不同&#x3D;&#x3D;：static存储在静态区，普通变量存储在堆区。<strong>在java7以上，static变量存储在Class对象中，Class对象和普通对象都存在堆中。</strong></li><li>&#x3D;&#x3D;加载时间不同&#x3D;&#x3D;：static变量在类加载的时候加载，类消失而消失，普通变量在对象加载而加载，对象消失而消失。</li><li>&#x3D;&#x3D;调用方式不同&#x3D;&#x3D;：static变量通过类名或者对象调用，普通变量需要实例化对象后调用。</li></ol><h3 id="15-static方法中可不可以使用this和super？"><a href="#15-static方法中可不可以使用this和super？" class="headerlink" title="15. static方法中可不可以使用this和super？"></a><code>15. static方法中可不可以使用this和super？</code></h3><p>不可以使用。因为this和super是代表的是实例化后的操作对象，而static属于类级别，无法指代任何实例对象。</p><h3 id="16-重载和重写有什么区别？"><a href="#16-重载和重写有什么区别？" class="headerlink" title="16. 重载和重写有什么区别？"></a><code>16. 重载和重写有什么区别？</code></h3><p><strong>重写：</strong>是父类与子类之间多态性的一种表现，即子类可以覆盖从父类继承的方法。</p><p><strong>重载：</strong>一个类中方法多态性的一种表现，即一个类中可以有多个同名的方法，方法的参数类型不同，参数个数不同，返回类型也可以不相同。</p><h3 id="16-静态方法可以被继承吗？"><a href="#16-静态方法可以被继承吗？" class="headerlink" title="16. 静态方法可以被继承吗？"></a><code>16. 静态方法可以被继承吗？</code></h3><ul><li>父类的静态属性、静态方法可以被子类继承；</li><li>如果子类也定义了相同的静态方法和静态属性，父类相同的方法和属性会被隐藏。</li></ul><h3 id="17-Java的异常类有哪些？"><a href="#17-Java的异常类有哪些？" class="headerlink" title="17. Java的异常类有哪些？"></a><code>17. Java的异常类有哪些？</code></h3><p><strong>&#x3D;&#x3D;红色区域的异常表示是程序需要显示捕捉或者抛出的&#x3D;&#x3D;</strong></p><p><img src="H:\JavaCode\Java学习书籍\images\Exception.jpg"></p><p><strong>Throwable：</strong>是Java异常类的顶级类，所有的异常类都继承这个类，**<code>Error</code><strong>和</strong><code>Exception</code>**是异常类的两大分类。</p><p><strong>Error：</strong>是非程序异常，即程序不能捕获的异常，一般是编译或者系统性错误，如**<code>OutOfMemorry</code>**内存溢出异常等。</p><p><strong>Runtime Exception：</strong>运行时异常，Java编译器不会去检查它，及时没有try-catch和throws捕获或者抛出它，也会编译通过，但是运行不通过，常见的有**<code>NullPointException</code><strong>、</strong><code>ArrayIndexOutOfBoundsException</code><strong>、</strong><code>ArithmeticException</code>**等。</p><p><strong>非运行时异常：</strong>必须通过异常处理，try-catch 或 throws 捕获或抛出，如常见的**<code>IOException</code><strong>、</strong><code>ClassNotFoundException</code><strong>、</strong><code>FileNotFoundException</code>**等。</p><h3 id="18-什么时候会发生空指针异常？"><a href="#18-什么时候会发生空指针异常？" class="headerlink" title="18. 什么时候会发生空指针异常？"></a><code>18. 什么时候会发生空指针异常？</code></h3><pre><code class="java">Object obj = null; // 该对象未进行初始化操作String str = obj.toString();</code></pre><h3 id="19-如何避免空指针异常"><a href="#19-如何避免空指针异常" class="headerlink" title="19. 如何避免空指针异常"></a><code>19. 如何避免空指针异常</code></h3><ol><li><p>字符串比较，常量放在前面，如：</p><pre><code class="java">if(status.equals(SUCCESS))&#123;&#125;// 此时status可能为null造成空指针异常，应该把常量放在前面，就能避免空指针异常。</code></pre></li><li><p>初始化默认值，在对象初始化的时候给它一个默认值或者默认构造实现，如：</p><pre><code class="java">User user = new User();String name = user.EMPTY;</code></pre></li><li><p>返回空集合，返回一个集合的话，默认是null，统一规范返回一个空集合，如“</p><pre><code class="java">public List getUserList()&#123;    List list = userMapper.getUserList();    return list == null ? new ArrayList() : list;&#125;</code></pre></li><li><p>断言，可用来检查程序的安全性，在使用之前进行条件检查，如果不符合就报异常，符合就继续。Java中自带断言关键字：assert，如下：</p><pre><code class="java">assert name = null : &quot;姓名不能为空&quot;;// Spring中用法Assert.notNull(name, &quot;姓名不能为空&quot;);</code></pre></li></ol><h3 id="20-int-和-Integer-有什么区别？"><a href="#20-int-和-Integer-有什么区别？" class="headerlink" title="20. int 和 Integer 有什么区别？"></a><code>20. int 和 Integer 有什么区别？</code></h3><ul><li><strong><code>int</code></strong> 是基本数据类型，**<code>Integer</code><strong>是</strong><code>int</code>**的包装类型。</li><li>**<code>int</code><strong>的默认值是0，</strong><code>Integer</code>**属于Java类，默认值是null。</li><li>**<code>int</code><strong>可以直接使用，</strong><code>Integer</code>**必须实例化之后才能使用。</li><li>**<code>Integer</code><strong>属于Java类，所以比</strong><code>int</code><strong>应用更为广泛，比如泛型，</strong><code>int</code>**就不能。</li></ul><h3 id="21-什么是自动装箱、拆箱？"><a href="#21-什么是自动装箱、拆箱？" class="headerlink" title="21. 什么是自动装箱、拆箱？"></a><code>21. 什么是自动装箱、拆箱？</code></h3><p>自动装箱和拆箱机制提供基本数据类型和包装类型的相互装换操作。</p><p><strong>自动装箱：</strong>即把基本数据类型装换成包装类型，如以下代码：</p><pre><code class="java">Integer i1 = new Integer(3); // Java 9+ 已经废除Integer i2 = Integer.valueOf(3);// 自动装箱其实就是调用包装类的valueOf()方法。// 自动装箱Integer i3 = 8;</code></pre><p><strong>自动拆箱：</strong>即把包装类型转为基本数据类型，与自动装箱相反，如下代码：</p><pre><code class="java">Integer i1 = new Integer(3); // Java 9+ 已经废除Integer i2 = Integer.valueOf(3);// 自动装箱其实就是调用包装类的valueOf()方法。// 自动装箱Integer i3 = 8;// 自动拆箱int i4 = i3;int i5 = i3.intValue();</code></pre><h3 id="22-StringBuffer-和StringBuilder的区别？"><a href="#22-StringBuffer-和StringBuilder的区别？" class="headerlink" title="22. StringBuffer 和StringBuilder的区别？"></a><code>22. StringBuffer 和StringBuilder的区别？</code></h3><p>都继承了<code>AbstractStringBuilder</code>，默认容量都是16个字符，扩容大小都是原来的2倍+2字符。源码如下：</p><pre><code class="java">public StringBuilder() &#123;super(16);&#125;public StringBuffer() &#123;super(16);&#125;private int newCapacity(int minCapacity) &#123;    // overflow-conscious code    int newCapacity = (value.length &lt;&lt; 1) + 2;    if (newCapacity - minCapacity &lt; 0) &#123;        newCapacity = minCapacity;    &#125;    return (newCapacity &lt;= 0 || MAX_ARRAY_SIZE - newCapacity &lt; 0)        ? hugeCapacity(minCapacity)         : newCapacity;&#125;</code></pre><p><strong>线程安全：</strong><code>StringBuffer</code>线程安全，<code>StringBuilder</code>线程不安全，前者公开的方法都用<code>synchronized</code>进行修饰。</p><p><strong>缓冲区：</strong><code>StringBuffer</code>每次获取<code>toString</code>都会去缓存区的<code>toStringCache</code>构造一个字符串，而<code>StringBuilder</code>每次都需要复制一次字符串，在构造一个字符串。</p><p><strong>性能：</strong><code>StringBuilder</code>性能要比<code>StringBuffer</code>要好得多，因为没有加锁。</p><h3 id="23-普通类和抽象类的区别"><a href="#23-普通类和抽象类的区别" class="headerlink" title="23. 普通类和抽象类的区别"></a><code>23. 普通类和抽象类的区别</code></h3><ul><li>抽象类必须用abstract关键字标识，普通类不用。</li><li>抽象类可包含抽象方法，抽象方法不在抽象类中实现。普通类中不能包含抽象方法。</li><li>抽象类设计给子类继承用的，不能直接通过new实例化，只能通过子类继承来实例化，或者通过匿名内部类进行实例化。普通类可以直接实例化。</li></ul><h3 id="24-静态变量和实例变量有什么区别"><a href="#24-静态变量和实例变量有什么区别" class="headerlink" title="24. 静态变量和实例变量有什么区别?"></a><code>24. 静态变量和实例变量有什么区别?</code></h3><p><strong>静态变量：</strong>属于类，不属于任何一个对象，当前类不管创建多个对象，只有一个静态变量被多个对象共享。</p><p><strong>实例变量：</strong>属于某一个对象，需要通过一个类的对象实例才能访问它。</p><h3 id="25-接口和抽象类有什么区别？"><a href="#25-接口和抽象类有什么区别？" class="headerlink" title="25. 接口和抽象类有什么区别？"></a><code>25. 接口和抽象类有什么区别？</code></h3><ol><li>抽象类是一个”类”，接口只是一个”接口”。</li><li>抽象类可以写构造方法，接口不能写构造方法，即抽象类参与类的实例化过程，接口则不是。</li><li>抽象类可以有自己的各种成员变量，可以通过类中非抽象方法进行修改；接口中的变量默认是<code>public static final</code>修饰的，都是常量，不能被自己或者外部修改。</li><li>接口实现多继承，而抽象类只能单继承。类与类是单继承，类与接口、接口与接口可以多继承。</li></ol><h3 id="26-除了用new关键字创建对象，还有哪些？"><a href="#26-除了用new关键字创建对象，还有哪些？" class="headerlink" title="26. 除了用new关键字创建对象，还有哪些？"></a><code>26. 除了用new关键字创建对象，还有哪些？</code></h3><p>&#x3D;&#x3D;克隆一个对象&#x3D;&#x3D;</p><p>对象类需要实现Cloneable接口，并实现clone()方法：</p><pre><code class="java">@Data@NoArgsConstructor@AllArgsConstructorclass GrilFriend implements Cloneable&#123;    private String name;    @Override    protected Object clone() throws CloneNotSupportedException &#123;        return super.clone();    &#125;&#125;</code></pre><p>现在克隆一个对象，代码如下：</p><pre><code class="java">public class Main &#123;    public static void main(String[] args) throws CloneNotSupportedException &#123;        GirlFriend girlFriend1 = new GirlFriend(&quot;克隆一个对象&quot;);        GirlFriend girlFriend2 = (GirlFriend) girlFriend1.clone();        System.out.println(girlFriend2);    &#125;&#125;// 结果：GirlFriend&#123;name=&#39;克隆一个对象&#39;&#125;</code></pre><p>&#x3D;&#x3D;派发一个对象（反射机制）&#x3D;&#x3D;</p><p>主要代码，如下：</p><pre><code class="java">// 派发一个对象GirlFriend girlFriend = GirlFriend.class.newInstance();girlFriend.setName(&quot;派发一个对象&quot;);System.out.println(girlFriend);</code></pre><p>&#x3D;&#x3D;动态加载一个对象（反射）&#x3D;&#x3D;</p><p>主要代码，如下：</p><pre><code class="java">// 动态加载一个对象GirlFriend girlFriend3 = (GirlFriend) Class.forName(&quot;GirlFriend&quot;).newInstance();girlFriend3.setName(&quot;动态加载一个对象&quot;);System.out.println(girlFriend3);</code></pre><p>&#x3D;&#x3D;构造一个对象（反射）&#x3D;&#x3D;</p><p>主要代码，如下</p><pre><code class="java">// 构造一个对象GirlFriend g = GrilFriend.class.getConstructor().newInstance();g.setName(&quot;构造一个对象&quot;);System.out.println(g);</code></pre><h3 id="27-equals-和HashCode之间的区别和联系？"><a href="#27-equals-和HashCode之间的区别和联系？" class="headerlink" title="27. equals 和HashCode之间的区别和联系？"></a><code>27. equals 和HashCode之间的区别和联系？</code></h3><ol><li>两个对象用<code>equals()</code>比较返回<code>true</code>时，那么<code>hashCode()</code>方法必须返回相同的结果，如果重写<code>equals()</code>方法，也必须重写<code>hashCode()</code>方法。</li><li>两个对象用<code>equals()</code>比较返回<code>false</code>时，不要求<code>hashCode()</code>方法可以返回不同的值，但是最好返回不同的值，以提高哈希表的性能。</li></ol><h3 id="28-两个对象equals结果为true-HashCode一定相同吗？"><a href="#28-两个对象equals结果为true-HashCode一定相同吗？" class="headerlink" title="28. 两个对象equals结果为true,HashCode一定相同吗？ "></a><code>28. 两个对象equals结果为true,HashCode一定相同吗？ </code></h3><p>&#x3D;&#x3D;不一定相同,但严格意义上必须相同&#x3D;&#x3D;，如果该类没有重写<code>HashCode()</code>方法，<code>HashCode</code>就不一定相同 。</p><h3 id="29-两个对象HashCode相等，equals方法也会相等吗？"><a href="#29-两个对象HashCode相等，equals方法也会相等吗？" class="headerlink" title="29. 两个对象HashCode相等，equals方法也会相等吗？"></a><code>29. 两个对象HashCode相等，equals方法也会相等吗？</code></h3><p>不一定，两个对象<code>equals</code>相等，则它们的hashCode必须相等，反过来不需要相同。</p><p><strong>对象的hashCode可能存在冲突的情况，即多个对象共用一个hashCode，Java中是允许的，但如果重写了equals()方法，比较的是对象的值，这时，两个对象的equals比较的值就可能不相同。</strong></p><h3 id="30-为什么重写equals就要重写hashCode？"><a href="#30-为什么重写equals就要重写hashCode？" class="headerlink" title="30. 为什么重写equals就要重写hashCode？"></a><code>30. 为什么重写equals就要重写hashCode？</code></h3><p><strong>如果只重写了equals方法，没有重写hashCode方法，就会出现equals相等，hashCode不相等的情况。</strong></p><p>而<code>Hash*</code>相关的集合都是基于Hash表来实现的，比如<code>HashMap</code>数据结构是数组+链表为基础，其中关键的是数组下标的处理。而数组的索引下标是根据传入值的<code>hashCode</code>方法来决定的。</p><p><strong>在hashCode相等的情况下：</strong></p><ul><li>如果数组索引位置上已经有值了，值相等则进行覆盖，若不相等则加入到对应的链表中。</li><li>如果数组索引上没有值，直接插入。</li></ul><p>所以如果多个<code>equals</code>相等的对象，而他们的<code>hashCode</code>不相等，他们就会不断插入到数组中，而不会进行覆盖，由此会带来<code>Hash*</code>相关的集合不能正常工作。</p><h2 id="二、集合"><a href="#二、集合" class="headerlink" title="二、集合"></a>二、集合</h2><h3 id="1-常见的集合有哪些？"><a href="#1-常见的集合有哪些？" class="headerlink" title="1. 常见的集合有哪些？"></a><code>1. 常见的集合有哪些？</code></h3><p><strong>Java所有集合框架的顶级接口有两大类：<code>Collection</code>接口和<code>Map</code>接口。</strong></p><ul><li><p><code>Collection</code>接口的子接口包括<code>List</code>接口和<code>Set</code>接口；</p><p><code>List</code>接口的实现类主要有：<code>ArrayList、LinkedList、Stack、Vector...</code></p><p><code>Set</code>接口的实现类主要有：<code>TreeSet、HashSet、LinkedHashSet...</code></p></li><li><p><code>Map</code>接口的实现类主要有：<code>HashMap、TreeMap、HashTable、ConcurrentHashMap...</code></p></li></ul><h3 id="2-常见的并发集合有哪些？"><a href="#2-常见的并发集合有哪些？" class="headerlink" title="2. 常见的并发集合有哪些？"></a><code>2. 常见的并发集合有哪些？</code></h3><p><code>ConcurrentHashMap、ConcurrentLinkedQueue、ConcurrentLinkedDeque、CopyOnWriteArrayList、CopyOnWriteArraySet...</code></p><h3 id="3-Comparable和Comparator接口的区别"><a href="#3-Comparable和Comparator接口的区别" class="headerlink" title="3. Comparable和Comparator接口的区别"></a><code>3. Comparable和Comparator接口的区别</code></h3><ul><li><code>Comparable</code>是排序接口，若类实现了<code>Comparable</code>接口，并实现排序方法，就表示该类支持排序，相当于一个内置排序器。</li><li><code>Comparator</code>是比较器接口，可以创建多个<code>Comparator</code>接口的实现来实现自定义排序，相当于一个外部排序器。</li></ul><h3 id="4-List、Set、Map之间的区别是什么？"><a href="#4-List、Set、Map之间的区别是什么？" class="headerlink" title="4. List、Set、Map之间的区别是什么？"></a><code>4. List、Set、Map之间的区别是什么？</code></h3><p>它们的区别主要体现在数据结构、元素是否有序、元素是否可重复、键值是否为null等。三个接口的思维导图如下：</p><p><img src="H:\JavaCode\Java学习书籍\images\集合框架2.png"></p><h3 id="5-HashMap和HashTable的区别？"><a href="#5-HashMap和HashTable的区别？" class="headerlink" title="5. HashMap和HashTable的区别？"></a><code>5. HashMap和HashTable的区别？</code></h3><p>HashMap线程不安全，HashTable线程安全。</p><p>HashMap性能优于HashTable，因为HashTable加锁导致阻塞。&#x3D;&#x3D;如果保证线程安全又性能好，建议使用JUC包下的ConcurrentHashMap&#x3D;&#x3D;</p><p>HashMap的键值都可以为null，HashTable的键值不能为null，具体如源码所示：</p><pre><code class="java">// HashTable put()源码public synchronized V put(K key, V value) &#123;        // Make sure the value is not null        if (value == null) &#123;            throw new NullPointerException();        &#125;&#125;// HashMap hash()源码static final int hash(Object key) &#123;    int h;    // 当key为空的时候进行了处理    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);&#125;</code></pre><p>实现方式不一样，HashMap是继承AbstractMap，HashTable继承Dictionary。</p><p>容量扩容，两者的负载因子都是0.75f，HashMap的初始容量为16，扩容为原来的2倍；HashTable初始容量为11，扩容为原来的2倍+1。</p><p>迭代器不一样，HashMap中的Iterator迭代器是fail-fast的，而HashTable的Enumerator不是fail-fast的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/27/hello-world/"/>
      <url>/2023/10/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
